#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

// Set the LCD address to 0x27 for a 16 chars and 2 line display
LiquidCrystal_I2C lcd(0x29, 16, 2);


const int OPEN_DOOR = 35;
const int CLOSE_DOOR = 135;

#define BUZZER_PIN 7

#include <Keypad.h>

const byte ROWS = 4;
const byte COLS = 3;
char keys[ROWS][COLS] = {
  {'1','2','3'},
  {'4','5','6'},
  {'7','8','9'},
  {'*','0','#'}
};
byte rowPins[ROWS] = {2, 3, 4, 5}; 
byte colPins[COLS] = {A2, A1, A0}; 

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );


boolean getAndMatchPassword(){
  
  int pch = 4;
  String pass = "1235";
  String enpass = "";
  Serial.println("enter password");

  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("Enter password");
  lcd.setCursor(0,1);
  while(pch){
     char key = keypad.getKey();
     if (key){
        //Serial.println(key);
        // Serial.print("*");
        lcd.print("*");
        enpass+=key;
     }
  }
  if(enpass == pass){
    //Serial.println("Password Match");
    return true;
  }
  else{
    //Serial.println("Password did not Match");
    
  }
 return false;
}


/*
 -------------------------------------------------------------
 *             MFRC522      Arduino       Arduino   Arduino    Arduino          Arduino
 *             Reader/PCD   Uno/101       Mega      Nano v3    Leonardo/Micro   Pro Micro
 * Signal      Pin          Pin           Pin       Pin        Pin              Pin
 * -----------------------------------------------------------------------------------------
 * RST/Reset   RST          9             5         D9         RESET/ICSP-5     RST
 * SPI SS      SDA(SS)      10            53        D10        10               10
 * SPI MOSI    MOSI         11 / ICSP-4   51        D11        ICSP-4           16
 * SPI MISO    MISO         12 / ICSP-1   50        D12        ICSP-1           14
 * SPI SCK     SCK          13 / ICSP-3   52        D13        ICSP-3           15
 */


#include <SPI.h>
#include <MFRC522.h>
#include <Servo.h>

Servo myServo;
#define RST_PIN         9
#define SS_PIN          10

MFRC522 mfrc522(SS_PIN, RST_PIN);



String byteToNumberString(byte *buffer, byte bufferSize) {
    String uid = "";
    for (byte i = 0; i < bufferSize; i++) {
         //Serial.println((short) buffer[i]);//uuid += (char)buffer[i] < 0x10 ? " 0" : " ";
         char bufferI[10];
         itoa((int) buffer[i],bufferI,10);
         
    }
    return uid;
}





void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);         // Initialize serial communications with the PC

  myServo.attach(6);
//  while(1){
//    myServo.write(CLOSE_DOOR);//close
//    Serial.println(CLOSE_DOOR);
//    delay(3000);
//    myServo.write(OPEN_DOOR);
//    Serial.println(OPEN_DOOR);
//    delay(3000);
//  }
  while (!Serial);            // Do nothing if no serial port is opened (added for Arduinos based on ATMEGA32U4)
  Serial.println("H-W Ready.");
  SPI.begin();                // Init SPI bus
  mfrc522.PCD_Init();         // Init MFRC522 card
  Serial.println(F("RFID Init MFRC522 done."));
  lcd.begin();

  // Turn on the blacklight and print a message.
  lcd.backlight();
  lcd.print("Smart Security");
  lcd.setCursor(0,1);
  lcd.print("using IoT");
  pinMode(BUZZER_PIN,OUTPUT);
  delay(2000);


}

String auth_uid= "107192147114";
String uid = "";

void loop() {
    
    int result = -1;  
    Serial.println("scanning..");
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("scanning..");
    int blink_lcd = 0;
    do{
      lcd.setCursor(10,0);
      if(blink_lcd == 0){
        blink_lcd = 1;
        lcd.print(" ");
      }
      else{
        blink_lcd = 0;
        lcd.print(".");
      }
      result = readCard();
      delay(500);
    }while(result == -1);

    if(result == 1){
      // authorize
      Serial.println("Authorize.");
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("RFID Authorize");
       delay(1000);
      boolean pass = getAndMatchPassword();
     
      if(pass){
        Serial.println("Password match door open!");
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Password match!");
        myServo.write(OPEN_DOOR);
        delay(4000);
        Serial.println("Door close.");
        myServo.write(CLOSE_DOOR);
      }
      else{
        Serial.println("Password did not match!");
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("wrong password!");
        myServo.write(CLOSE_DOOR);
        digitalWrite(BUZZER_PIN,HIGH);
        delay(400);
        digitalWrite(BUZZER_PIN,LOW);
        delay(400);
        digitalWrite(BUZZER_PIN,HIGH);
        delay(400);
        digitalWrite(BUZZER_PIN,LOW);
        delay(400);
        digitalWrite(BUZZER_PIN,HIGH);
        delay(400);
        digitalWrite(BUZZER_PIN,LOW);
        delay(400);
        digitalWrite(BUZZER_PIN,HIGH);
        delay(400);
        digitalWrite(BUZZER_PIN,LOW);
      }
      
    }
    if(result == 0){
      // unauthorize
      Serial.println("unauthorize.");
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Unauthorize");
      myServo.write(CLOSE_DOOR);
      digitalWrite(BUZZER_PIN,HIGH);
      delay(400);
      digitalWrite(BUZZER_PIN,LOW);
      delay(400);
      digitalWrite(BUZZER_PIN,HIGH);
      delay(400);
      digitalWrite(BUZZER_PIN,LOW);
      delay(400);
      digitalWrite(BUZZER_PIN,HIGH);
      delay(400);
      digitalWrite(BUZZER_PIN,LOW);
      
    }

    
}


int readCard(){
  
  if ( !mfrc522.PICC_IsNewCardPresent())
        return -1;

  if ( !mfrc522.PICC_ReadCardSerial())
        return -1;;

  //Serial.print(F("Card UID:"));
  uid = byteToNumberString(mfrc522.uid.uidByte, mfrc522.uid.size);
  
  if(auth_uid == uid){
    //Serial.println("Authorize.");
    return 1;
  }
  else{
    //Serial.println("Unauthorize.");
    return 0;
  }
  
}
